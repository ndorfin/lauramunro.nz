{"version":3,"sources":["_typography.scss","_layout.scss","../node_modules/breakpoint-sass/stylesheets/_breakpoint.scss","_variables.scss"],"names":[],"mappings":"AAAA,6EAAY;ACAZ;EACI,cAAa;EACb,gBAAe;EACf,YAAW,EAId;ECyDG;IDhEJ;MAKQ,cAAa,EAEpB,EAAA;;AAED;;EAEI,+BAAsB;UAAtB,uBAAsB,EACzB;;AAED;EACI,iBAAgB;EAChB,YAAW;EACX,oBAAmB,EAKtB;EC0CG;IDlDJ;MAKQ,YAAW;MACX,YAAW,EAElB,EAAA;;AAED;EACI,cAAa;EACb,0BAAyB;EACzB,aAAY;EACZ,kBAAiB,EAMpB;EC8BG;IDxCJ;MAMQ,gBAAe;MACf,YAAW;MACX,YAAW,EAElB,EAAA;;AAED;EACI,qBAAa;EAAb,qBAAa;EAAb,cAAa;EACb,oBAAe;MAAf,gBAAe;EACf,0BAA8B;MAA9B,uBAA8B;UAA9B,+BAA8B;EAC9B,iBAAgB,EAoCnB;EAxCD;IAMQ,mBAAkB,EA2BrB;ICLD;MD5BJ;QAQY,oBAAa;YAAb,kBAAa;gBAAb,cAAa;QACb,oBAAmB;QACnB,+BAAsB;gBAAtB,uBAAsB,EAuB7B;QAjCL;UAYgB,WAAU,EACb;QAbb;UAegB,WAAU;UACV,sCAA6B;UAA7B,8BAA6B,EAChC,EAAA;ICWT;MD5BJ;QAqBgB,oBAAc;YAAd,mBAAc;gBAAd,eAAc;QACd,oBAAmB;QACnB,+BAAsB;gBAAtB,uBAAsB,EAS7B;QAhCT;UAyBoB,iBAAgB;UAChB,WAAU,EACb,EAAA;IA3BjB;MA8BgB,YAAW,EACd;EA/Bb;IAmCQ,aAAY;IACZ,gBAAe;IACf,aAAY;IACZ,0BAAyB,EAC5B;;ADzEL;EACI,qCGH+B,EHIlC;;AAED;EACI,iBAAgB,EAInB;EALD;IAGQ,sBAAqB,EACxB;;AAGL;EACI,iBAAgB,EACnB;;AAED;EACI,kBAAiB,EAIpB;;AAED;EACI,aAAY,EACf","file":"styles.css","sourcesContent":["@import url(\"https://fonts.googleapis.com/css?family=Work+Sans:400,800,900\");\n\nbody {\n    font-family: $font-body;\n}\n\nh1 {\n    font-weight: 900;\n    a {\n        text-decoration: none;\n    }\n}\n\nh2 {\n    font-weight: 800;\n}\n\np {\n    line-height: 32px;\n    a {\n        \n    }\n}\n\na {\n    color: black;\n}\n","body {\n    padding: 50px;\n    font-size: 18px;\n    margin: 0px;\n    @include breakpoint($mobile) {\n        padding: 30px;\n    }\n}\n\nbody,\ndiv {\n    box-sizing: border-box;\n}\n\ndiv.left {\n    max-width: 400px;\n    float: left;\n    padding-right: 50px;\n    @include breakpoint($mobile) {\n        width: 100%;\n        float: none;\n    }\n}\n\ndiv.right {\n    width: 1000px;\n    width: calc(100% - 450px);\n    float: right;\n    margin-top: 150px;\n    @include breakpoint($mobile) {\n        margin-top: 0px;\n        width: 100%;\n        float: none;\n    }\n}\n\ndiv.pics {\n    display: flex;\n    flex-wrap: wrap;\n    justify-content: space-between;\n    max-width: 860px;\n    figure {\n        margin: 0 0 40px 0;\n        @include breakpoint($desktop) {\n            flex: 0 1 50%;\n            padding-right: 40px;\n            box-sizing: border-box;\n            &:hover figcaption {\n                opacity: 1;\n            }\n            figcaption {\n                opacity: 0;\n                transition: 0.2s ease opacity;\n            }\n        }\n        &.large {\n            @include breakpoint($desktop) {\n                flex: 0 1 100%;\n                padding-right: 40px;\n                box-sizing: border-box;\n                figcaption {\n                    margin-top: 40px;\n                    opacity: 1;\n                }\n            }\n            img {\n                width: auto;\n            }\n        }\n    }\n    img {\n        width: 400px;\n        max-width: 100%;\n        height: auto;\n        border: 1px solid #ececec;\n    }\n}\n","//////////////////////////////\n// Default Variables\n//////////////////////////////\n$Breakpoint-Settings: (\n  'default media': all,\n  'default feature': min-width,\n  'default pair': width,\n\n  'force all media type': false,\n  'to ems': false,\n  'transform resolutions': true,\n\n  'no queries': false,\n  'no query fallbacks': false,\n\n  'base font size': 16px,\n\n  'legacy syntax': false\n);\n\n$breakpoint: () !default;\n\n//////////////////////////////\n// Imports\n//////////////////////////////\n@import \"breakpoint/settings\";\n@import 'breakpoint/context';\n@import 'breakpoint/helpers';\n@import 'breakpoint/parsers';\n@import 'breakpoint/no-query';\n\n@import 'breakpoint/respond-to';\n\n@import \"breakpoint/legacy-settings\";\n\n//////////////////////////////\n// Breakpoint Mixin\n//////////////////////////////\n\n@mixin breakpoint($query, $no-query: false) {\n  @include legacy-settings-warning;\n\n  // Reset contexts\n  @include private-breakpoint-reset-contexts();\n\n  $breakpoint: breakpoint($query, false);\n\n  $query-string: map-get($breakpoint, 'query');\n  $query-fallback: map-get($breakpoint, 'fallback');\n\n  $private-breakpoint-context-holder: map-get($breakpoint, 'context holder') !global;\n  $private-breakpoint-query-count: map-get($breakpoint, 'query count') !global;\n\n  // Allow for an as-needed override or usage of no query fallback.\n  @if $no-query != false {\n    $query-fallback: $no-query;\n  }\n\n  @if $query-fallback != false {\n    $context-setter: private-breakpoint-set-context('no-query', $query-fallback);\n  }\n\n  // Print Out Query String\n  @if not breakpoint-get('no queries') {\n    @media #{$query-string} {\n      @content;\n    }\n  }\n\n  @if breakpoint-get('no query fallbacks') != false or breakpoint-get('no queries') == true {\n\n    $type: type-of(breakpoint-get('no query fallbacks'));\n    $print: false;\n\n    @if ($type == 'bool') {\n      $print: true;\n    }\n    @else if ($type == 'string') {\n      @if $query-fallback == breakpoint-get('no query fallbacks') {\n        $print: true;\n      }\n    }\n    @else if ($type == 'list') {\n      @each $wrapper in breakpoint-get('no query fallbacks') {\n        @if $query-fallback == $wrapper {\n          $print: true;\n        }\n      }\n    }\n\n    // Write Fallback\n    @if ($query-fallback != false) and ($print == true) {\n      $type-fallback: type-of($query-fallback);\n\n      @if ($type-fallback != 'bool') {\n        #{$query-fallback} & {\n          @content;\n        }\n      }\n      @else {\n        @content;\n      }\n    }\n  }\n\n  @include private-breakpoint-reset-contexts();\n}\n\n\n@mixin mq($query, $no-query: false) {\n  @include breakpoint($query, $no-query) {\n    @content;\n  }\n}\n","$font-body: 'Work Sans', sans-serif;\n\n$mobile: 0 768px;\n$desktop: 1080px;\n"]}